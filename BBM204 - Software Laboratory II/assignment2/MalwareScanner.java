import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;

public class MalwareScanner
{
    private final Map<String, Malware> malwareDB;

    public MalwareScanner(Map<String, Malware> malwareDB) {
        this.malwareDB = malwareDB;
    }


    public void scanFile(String filename) throws IOException
    {
        ArrayList<String> list = ReadFile.readFileToArrayList(filename);
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("scanLog.txt", true));
        int cnt = 0;
        int i = 0;

        try
        {
            for(String str : list)
            {
                i++;
                String hashCode = turbo64(str);
                if(malwareDB.containsKey(hashCode))
                {
                    cnt++;

                    Malware malware = malwareDB.get(hashCode);
                    System.out.println("--------------------------------------------------------------------------------");
                    System.out.println("Detected malware!");
                    System.out.println(malware + "");
                    bufferedWriter.write(hashCode + "@" + i + "\n");
                }
            }
        }

        catch(Exception e)
        {
            e.printStackTrace();
        }

        System.out.println("--------------------------------------------------------------------------------");
        System.out.println("Scan complete! " + cnt + " threats are found and eliminated. Generating log file...");

        bufferedWriter.close();
    }


    public static String turbo64(String in)
    {
        long modTurbo = 4294967291L;
        long a = 0;
        long b = 1;
        long temp;
        String str;

        for(int i = 0; i < in.length(); i++)
        {
            char c = in.charAt(i);
            a = (a + c) % modTurbo;
            b = (a + b) % modTurbo;
        }

        temp = b << 32;
        temp = temp | a;
        str = Long.toHexString(temp);

        return str;
    }
}
